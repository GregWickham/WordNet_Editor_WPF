#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WordNet.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="wordnet")]
	public partial class WordNetDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSynset(Synset instance);
    partial void UpdateSynset(Synset instance);
    partial void DeleteSynset(Synset instance);
    partial void InsertWordSense(WordSense instance);
    partial void UpdateWordSense(WordSense instance);
    partial void DeleteWordSense(WordSense instance);
    #endregion
		
		public WordNetDataContext() : 
				base("Data Source=38.192.14.25,49170;Initial Catalog=wordnet;Persist Security Info=True" +
						";User ID=sa", mappingSource)
		{
			OnCreated();
		}
		
		public WordNetDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WordNetDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WordNetDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WordNetDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Synset> Synsets
		{
			get
			{
				return this.GetTable<Synset>();
			}
		}
		
		public System.Data.Linq.Table<WordSense> WordSenses
		{
			get
			{
				return this.GetTable<WordSense>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.HypernymsOf", IsComposable=true)]
		public IQueryable<Synset> HypernymsOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="HyponymID", DbType="Int")] System.Nullable<int> hyponymID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), hyponymID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.HyponymsOf", IsComposable=true)]
		public IQueryable<Synset> HyponymsOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="HypernymID", DbType="Int")] System.Nullable<int> hypernymID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), hypernymID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.HolonymsOf", IsComposable=true)]
		public IQueryable<Synset> HolonymsOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeronymID", DbType="Int")] System.Nullable<int> meronymID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), meronymID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.MeronymsOf", IsComposable=true)]
		public IQueryable<Synset> MeronymsOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="HolonymID", DbType="Int")] System.Nullable<int> holonymID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), holonymID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CausedBy", IsComposable=true)]
		public IQueryable<Synset> CausedBy([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CauserID", DbType="Int")] System.Nullable<int> causerID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), causerID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CausesOf", IsComposable=true)]
		public IQueryable<Synset> CausesOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CausedID", DbType="Int")] System.Nullable<int> causedID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), causedID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EntailedBy", IsComposable=true)]
		public IQueryable<Synset> EntailedBy([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EntailerID", DbType="Int")] System.Nullable<int> entailerID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), entailerID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EntailersOf", IsComposable=true)]
		public IQueryable<Synset> EntailersOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EntailedID", DbType="Int")] System.Nullable<int> entailedID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), entailedID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InstancesOf", IsComposable=true)]
		public IQueryable<Synset> InstancesOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TypeID", DbType="Int")] System.Nullable<int> typeID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), typeID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TypesOf", IsComposable=true)]
		public IQueryable<Synset> TypesOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InstanceID", DbType="Int")] System.Nullable<int> instanceID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SatellitesOf", IsComposable=true)]
		public IQueryable<Synset> SatellitesOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="HeadID", DbType="Int")] System.Nullable<int> headID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), headID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ClusterHeadsOf", IsComposable=true)]
		public IQueryable<Synset> ClusterHeadsOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SatelliteID", DbType="Int")] System.Nullable<int> satelliteID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), satelliteID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AttributesWithValue", IsComposable=true)]
		public IQueryable<Synset> AttributesWithValue([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ValueID", DbType="Int")] System.Nullable<int> valueID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), valueID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ValuesOfAttribute", IsComposable=true)]
		public IQueryable<Synset> ValuesOfAttribute([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AttributeID", DbType="Int")] System.Nullable<int> attributeID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), attributeID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.WordSensesForSynset", IsComposable=true)]
		public IQueryable<WordSense> WordSensesForSynset([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID)
		{
			return this.CreateMethodCallQuery<WordSense>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DerivationsOf", IsComposable=true)]
		public IQueryable<WordSense> DerivationsOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<WordSense>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PertainsTo", IsComposable=true)]
		public IQueryable<WordSense> PertainsTo([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<WordSense>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PertainedBy", IsComposable=true)]
		public IQueryable<WordSense> PertainedBy([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<WordSense>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AntonymsOf", IsComposable=true)]
		public IQueryable<WordSense> AntonymsOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<WordSense>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PertainersOf", IsComposable=true)]
		public IQueryable<WordSense> PertainersOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<WordSense>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SeeAlso", IsComposable=true)]
		public IQueryable<WordSense> SeeAlso([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<WordSense>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AdverbsDerivedFrom", IsComposable=true)]
		public IQueryable<WordSense> AdverbsDerivedFrom([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<WordSense>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SynsetsWithSenseMatchingWord", IsComposable=true)]
		public IQueryable<Synset> SynsetsWithSenseMatchingWord([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordText", DbType="NVarChar(255)")] string wordText)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), wordText);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ParticipleFormsOf", IsComposable=true)]
		public IQueryable<WordSense> ParticipleFormsOf([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<WordSense>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.BaseVerbFormsOfParticiple", IsComposable=true)]
		public IQueryable<WordSense> BaseVerbFormsOfParticiple([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<WordSense>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TeleologyFor", IsComposable=true)]
		public IQueryable<TeleologyForResult2> TeleologyFor([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<TeleologyForResult2>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.VerbFramesForSynset", IsComposable=true)]
		public IQueryable<VerbFramesForSynsetResult> VerbFramesForSynset([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID)
		{
			return this.CreateMethodCallQuery<VerbFramesForSynsetResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.VerbFramesForWordSense", IsComposable=true)]
		public IQueryable<VerbFramesForWordSenseResult> VerbFramesForWordSense([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<VerbFramesForWordSenseResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SynsetsInVerbGroupWith", IsComposable=true)]
		public IQueryable<Synset> SynsetsInVerbGroupWith([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.MorphosemanticRelationsFor", IsComposable=true)]
		public IQueryable<MorphosemanticRelationsForResult> MorphosemanticRelationsFor([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<MorphosemanticRelationsForResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AdjectivesBasesOfDerivedAdverb", IsComposable=true)]
		public IQueryable<WordSense> AdjectivesBasesOfDerivedAdverb([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<WordSense>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SyntaxOfAdjective", IsComposable=true)]
		public IQueryable<SyntaxOfAdjectiveResult> SyntaxOfAdjective([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SynsetID", DbType="Int")] System.Nullable<int> synsetID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordNumber", DbType="Int")] System.Nullable<int> wordNumber)
		{
			return this.CreateMethodCallQuery<SyntaxOfAdjectiveResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), synsetID, wordNumber);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SynsetsWithNounSenseMatching", IsComposable=true)]
		public IQueryable<Synset> SynsetsWithNounSenseMatching([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordText", DbType="NVarChar(255)")] string wordText)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), wordText);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SynsetsWithVerbSenseMatching", IsComposable=true)]
		public IQueryable<Synset> SynsetsWithVerbSenseMatching([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordText", DbType="NVarChar(255)")] string wordText)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), wordText);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SynsetsWithAdjectiveSenseMatching", IsComposable=true)]
		public IQueryable<Synset> SynsetsWithAdjectiveSenseMatching([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordText", DbType="NVarChar(255)")] string wordText)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), wordText);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SynsetsWithAdverbSenseMatching", IsComposable=true)]
		public IQueryable<Synset> SynsetsWithAdverbSenseMatching([global::System.Data.Linq.Mapping.ParameterAttribute(Name="WordText", DbType="NVarChar(255)")] string wordText)
		{
			return this.CreateMethodCallQuery<Synset>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), wordText);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSynsets")]
	public partial class Synset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Gloss;
		
		private char _POS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGlossChanging(string value);
    partial void OnGlossChanged();
    partial void OnPOSChanging(char value);
    partial void OnPOSChanged();
    #endregion
		
		public Synset()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gloss", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Gloss
		{
			get
			{
				return this._Gloss;
			}
			set
			{
				if ((this._Gloss != value))
				{
					this.OnGlossChanging(value);
					this.SendPropertyChanging();
					this._Gloss = value;
					this.SendPropertyChanged("Gloss");
					this.OnGlossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POS", DbType="NChar(1) NOT NULL")]
		public char POS
		{
			get
			{
				return this._POS;
			}
			set
			{
				if ((this._POS != value))
				{
					this.OnPOSChanging(value);
					this.SendPropertyChanging();
					this._POS = value;
					this.SendPropertyChanged("POS");
					this.OnPOSChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSenses")]
	public partial class WordSense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SynsetID;
		
		private int _WordNumber;
		
		private string _WordText;
		
		private char _POS;
		
		private int _SenseNumber;
		
		private int _TagCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSynsetIDChanging(int value);
    partial void OnSynsetIDChanged();
    partial void OnWordNumberChanging(int value);
    partial void OnWordNumberChanged();
    partial void OnWordTextChanging(string value);
    partial void OnWordTextChanged();
    partial void OnPOSChanging(char value);
    partial void OnPOSChanged();
    partial void OnSenseNumberChanging(int value);
    partial void OnSenseNumberChanged();
    partial void OnTagCountChanging(int value);
    partial void OnTagCountChanged();
    #endregion
		
		public WordSense()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SynsetID", DbType="Int NOT NULL")]
		public int SynsetID
		{
			get
			{
				return this._SynsetID;
			}
			set
			{
				if ((this._SynsetID != value))
				{
					this.OnSynsetIDChanging(value);
					this.SendPropertyChanging();
					this._SynsetID = value;
					this.SendPropertyChanged("SynsetID");
					this.OnSynsetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordNumber", DbType="Int NOT NULL")]
		public int WordNumber
		{
			get
			{
				return this._WordNumber;
			}
			set
			{
				if ((this._WordNumber != value))
				{
					this.OnWordNumberChanging(value);
					this.SendPropertyChanging();
					this._WordNumber = value;
					this.SendPropertyChanged("WordNumber");
					this.OnWordNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordText", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string WordText
		{
			get
			{
				return this._WordText;
			}
			set
			{
				if ((this._WordText != value))
				{
					this.OnWordTextChanging(value);
					this.SendPropertyChanging();
					this._WordText = value;
					this.SendPropertyChanged("WordText");
					this.OnWordTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POS", DbType="NChar(1) NOT NULL")]
		public char POS
		{
			get
			{
				return this._POS;
			}
			set
			{
				if ((this._POS != value))
				{
					this.OnPOSChanging(value);
					this.SendPropertyChanging();
					this._POS = value;
					this.SendPropertyChanged("POS");
					this.OnPOSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenseNumber", DbType="Int NOT NULL")]
		public int SenseNumber
		{
			get
			{
				return this._SenseNumber;
			}
			set
			{
				if ((this._SenseNumber != value))
				{
					this.OnSenseNumberChanging(value);
					this.SendPropertyChanging();
					this._SenseNumber = value;
					this.SendPropertyChanged("SenseNumber");
					this.OnSenseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagCount", DbType="Int NOT NULL")]
		public int TagCount
		{
			get
			{
				return this._TagCount;
			}
			set
			{
				if ((this._TagCount != value))
				{
					this.OnTagCountChanging(value);
					this.SendPropertyChanging();
					this._TagCount = value;
					this.SendPropertyChanged("TagCount");
					this.OnTagCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class TeleologyForResult2
	{
		
		private string _SourceWordText;
		
		private char _SourcePOS;
		
		private string _Relation;
		
		private string _TelosWordText;
		
		private char _TelosPOS;
		
		public TeleologyForResult2()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceWordText", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SourceWordText
		{
			get
			{
				return this._SourceWordText;
			}
			set
			{
				if ((this._SourceWordText != value))
				{
					this._SourceWordText = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourcePOS", DbType="NChar(1) NOT NULL")]
		public char SourcePOS
		{
			get
			{
				return this._SourcePOS;
			}
			set
			{
				if ((this._SourcePOS != value))
				{
					this._SourcePOS = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Relation", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Relation
		{
			get
			{
				return this._Relation;
			}
			set
			{
				if ((this._Relation != value))
				{
					this._Relation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelosWordText", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string TelosWordText
		{
			get
			{
				return this._TelosWordText;
			}
			set
			{
				if ((this._TelosWordText != value))
				{
					this._TelosWordText = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelosPOS", DbType="NChar(1) NOT NULL")]
		public char TelosPOS
		{
			get
			{
				return this._TelosPOS;
			}
			set
			{
				if ((this._TelosPOS != value))
				{
					this._TelosPOS = value;
				}
			}
		}
	}
	
	public partial class VerbFramesForSynsetResult
	{
		
		private string _VerbFrame;
		
		public VerbFramesForSynsetResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerbFrame", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string VerbFrame
		{
			get
			{
				return this._VerbFrame;
			}
			set
			{
				if ((this._VerbFrame != value))
				{
					this._VerbFrame = value;
				}
			}
		}
	}
	
	public partial class VerbFramesForWordSenseResult
	{
		
		private string _VerbFrame;
		
		public VerbFramesForWordSenseResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerbFrame", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string VerbFrame
		{
			get
			{
				return this._VerbFrame;
			}
			set
			{
				if ((this._VerbFrame != value))
				{
					this._VerbFrame = value;
				}
			}
		}
	}
	
	public partial class MorphosemanticRelationsForResult
	{
		
		private string _SourceWordText;
		
		private char _SourcePOS;
		
		private string _Relation;
		
		private string _TargetWordText;
		
		private char _TargetPOS;
		
		public MorphosemanticRelationsForResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceWordText", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SourceWordText
		{
			get
			{
				return this._SourceWordText;
			}
			set
			{
				if ((this._SourceWordText != value))
				{
					this._SourceWordText = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourcePOS", DbType="NChar(1) NOT NULL")]
		public char SourcePOS
		{
			get
			{
				return this._SourcePOS;
			}
			set
			{
				if ((this._SourcePOS != value))
				{
					this._SourcePOS = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Relation", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Relation
		{
			get
			{
				return this._Relation;
			}
			set
			{
				if ((this._Relation != value))
				{
					this._Relation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetWordText", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string TargetWordText
		{
			get
			{
				return this._TargetWordText;
			}
			set
			{
				if ((this._TargetWordText != value))
				{
					this._TargetWordText = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetPOS", DbType="NChar(1) NOT NULL")]
		public char TargetPOS
		{
			get
			{
				return this._TargetPOS;
			}
			set
			{
				if ((this._TargetPOS != value))
				{
					this._TargetPOS = value;
				}
			}
		}
	}
	
	public partial class SyntaxOfAdjectiveResult
	{
		
		private string _SyntaxCode;
		
		public SyntaxOfAdjectiveResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SyntaxCode", DbType="NVarChar(2) NOT NULL", CanBeNull=false)]
		public string SyntaxCode
		{
			get
			{
				return this._SyntaxCode;
			}
			set
			{
				if ((this._SyntaxCode != value))
				{
					this._SyntaxCode = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
